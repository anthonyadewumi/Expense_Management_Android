Index: app/src/main/res/layout/activity_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.drawerlayout.widget.DrawerLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/navDrawer\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:openDrawer=\"start\">\n\n<androidx.constraintlayout.widget.ConstraintLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".ui.main.MainActivity\">\n\n    <FrameLayout\n        android:id=\"@+id/content_frame\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toRightOf=\"parent\">\n\n        <include layout=\"@layout/app_bar_main\" />\n\n    </FrameLayout>\n\n    <FrameLayout\n        android:id=\"@+id/container\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"0dp\"\n        app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"\n        app:layout_constraintBottom_toTopOf=\"@+id/bottomNavigationView\"\n        app:layout_constraintTop_toBottomOf=\"@id/content_frame\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\" />\n\n    <com.google.android.material.bottomnavigation.BottomNavigationView\n        android:id=\"@+id/bottomNavigationView\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        android:elevation=\"8dp\"\n        android:layout_marginLeft=\"@dimen/_15sdp\"\n        android:layout_marginRight=\"@dimen/_15sdp\"\n        android:layout_marginBottom=\"@dimen/_20sdp\"\n        android:background=\"@drawable/bottom_nav_background\"\n        app:itemIconTint=\"@drawable/bottom_nav_selector\"\n        app:itemTextColor=\"@drawable/bottom_nav_selector\"\n        app:itemIconSize=\"@dimen/_35sdp\"\n        app:labelVisibilityMode=\"unlabeled\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@id/container\"\n        app:menu=\"@menu/bottom_navigation\" />\n\n</androidx.constraintlayout.widget.ConstraintLayout>\n\n    <!-- Custom Navigation Drawer Start -->\n    <LinearLayout\n        android:id=\"@+id/navDrawerLayout\"\n        android:layout_width=\"@dimen/_200sdp\"\n        android:layout_height=\"match_parent\"\n        android:layout_gravity=\"start\"\n        android:background=\"@color/secondary\"\n        android:orientation=\"vertical\">\n\n        <LinearLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"@dimen/_120sdp\"\n            android:orientation=\"vertical\">\n\n            <ImageView\n                android:id=\"@+id/navDrawerHeaderImg\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"@dimen/_50sdp\"\n                android:padding=\"@dimen/_15sdp\"\n                android:scaleType=\"fitCenter\"\n                android:src=\"@drawable/ic_bonhams_white\"\n                tools:ignore=\"ContentDescription\" />\n\n\n            <LinearLayout\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:orientation=\"horizontal\"\n                android:layout_gravity=\"center\"\n                android:gravity=\"center_vertical\"\n                android:layout_marginTop=\"@dimen/_10sdp\">\n\n                <ImageView\n                    android:id=\"@+id/navDrawerProfilePic\"\n                    android:layout_width=\"@dimen/_40sdp\"\n                    android:layout_height=\"@dimen/_40sdp\"\n                    android:layout_marginStart=\"@dimen/_5sdp\"\n                    android:scaleType=\"fitCenter\"\n                    android:src=\"@drawable/ic_default_user\"\n                    tools:ignore=\"ContentDescription\" />\n\n\n                <LinearLayout\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"wrap_content\"\n                    android:orientation=\"vertical\"\n                    android:layout_marginStart=\"@dimen/_5sdp\">\n\n                <TextView\n                    android:id=\"@+id/navDrawerTitle\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_gravity=\"center_vertical\"\n                    android:gravity=\"center_vertical\"\n                    android:text=\"Wade Warren\"\n                    style=\"@style/TextRegular12\"\n                    android:textColor=\"@color/white\"/>\n\n                    <TextView\n                        android:id=\"@+id/navDrawerDescription\"\n                        android:layout_width=\"match_parent\"\n                        android:layout_height=\"wrap_content\"\n                        android:layout_gravity=\"center_vertical\"\n                        android:gravity=\"center_vertical\"\n                        android:text=\"wade@gmail.com\"\n                        style=\"@style/TextRegular10\"\n                        android:textColor=\"@color/white\"/>\n\n                </LinearLayout>\n\n            </LinearLayout>\n\n\n        </LinearLayout>\n\n        <androidx.recyclerview.widget.RecyclerView\n            android:id=\"@+id/navDrawerRv\"\n            android:layout_width=\"@dimen/_200sdp\"\n            android:layout_height=\"0dp\"\n            android:layout_weight=\"1\"\n            android:scrollbarThumbHorizontal=\"@null\"\n            android:scrollbarThumbVertical=\"@null\">\n\n        </androidx.recyclerview.widget.RecyclerView>\n\n\n        <TextView\n            android:id=\"@+id/tvNavDrawerAppVersion\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"center_horizontal\"\n            android:layout_margin=\"8sp\"\n            android:text=\"version 1.0\"\n            android:textAlignment=\"center\"\n            style=\"@style/TextRegular8\"\n            android:textColor=\"@color/white\"/>\n\n    </LinearLayout>\n    <!-- Custom Navigation Drawer End -->\n\n</androidx.drawerlayout.widget.DrawerLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_main.xml	(revision 7f83f402f94a215b57c9d412305013106377d540)
+++ app/src/main/res/layout/activity_main.xml	(date 1629777952090)
@@ -7,53 +7,53 @@
     android:layout_height="match_parent"
     tools:openDrawer="start">
 
-<androidx.constraintlayout.widget.ConstraintLayout
-    android:layout_width="match_parent"
-    android:layout_height="match_parent"
-    tools:context=".ui.main.MainActivity">
+    <androidx.constraintlayout.widget.ConstraintLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        tools:context=".ui.main.MainActivity">
 
-    <FrameLayout
-        android:id="@+id/content_frame"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        app:layout_constraintTop_toTopOf="parent"
-        app:layout_constraintLeft_toLeftOf="parent"
-        app:layout_constraintRight_toRightOf="parent">
+        <FrameLayout
+            android:id="@+id/content_frame"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            app:layout_constraintTop_toTopOf="parent"
+            app:layout_constraintLeft_toLeftOf="parent"
+            app:layout_constraintRight_toRightOf="parent">
 
-        <include layout="@layout/app_bar_main" />
+            <include layout="@layout/app_bar_main" />
 
-    </FrameLayout>
+        </FrameLayout>
 
-    <FrameLayout
-        android:id="@+id/container"
-        android:layout_width="match_parent"
-        android:layout_height="0dp"
-        app:layout_behavior="@string/appbar_scrolling_view_behavior"
-        app:layout_constraintBottom_toTopOf="@+id/bottomNavigationView"
-        app:layout_constraintTop_toBottomOf="@id/content_frame"
-        app:layout_constraintEnd_toEndOf="parent"
-        app:layout_constraintStart_toStartOf="parent" />
+        <FrameLayout
+            android:id="@+id/container"
+            android:layout_width="match_parent"
+            android:layout_height="0dp"
+            app:layout_behavior="@string/appbar_scrolling_view_behavior"
+            app:layout_constraintBottom_toTopOf="@+id/bottomNavigationView"
+            app:layout_constraintTop_toBottomOf="@id/content_frame"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintStart_toStartOf="parent" />
 
-    <com.google.android.material.bottomnavigation.BottomNavigationView
-        android:id="@+id/bottomNavigationView"
-        android:layout_width="0dp"
-        android:layout_height="wrap_content"
-        android:elevation="8dp"
-        android:layout_marginLeft="@dimen/_15sdp"
-        android:layout_marginRight="@dimen/_15sdp"
-        android:layout_marginBottom="@dimen/_20sdp"
-        android:background="@drawable/bottom_nav_background"
-        app:itemIconTint="@drawable/bottom_nav_selector"
-        app:itemTextColor="@drawable/bottom_nav_selector"
-        app:itemIconSize="@dimen/_35sdp"
-        app:labelVisibilityMode="unlabeled"
-        app:layout_constraintBottom_toBottomOf="parent"
-        app:layout_constraintLeft_toLeftOf="parent"
-        app:layout_constraintRight_toRightOf="parent"
-        app:layout_constraintTop_toBottomOf="@id/container"
-        app:menu="@menu/bottom_navigation" />
+        <com.google.android.material.bottomnavigation.BottomNavigationView
+            android:id="@+id/bottomNavigationView"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:elevation="8dp"
+            android:layout_marginLeft="@dimen/_15sdp"
+            android:layout_marginRight="@dimen/_15sdp"
+            android:layout_marginBottom="@dimen/_20sdp"
+            android:background="@drawable/bottom_nav_background"
+            app:itemIconTint="@drawable/bottom_nav_selector"
+            app:itemTextColor="@drawable/bottom_nav_selector"
+            app:itemIconSize="@dimen/_35sdp"
+            app:labelVisibilityMode="unlabeled"
+            app:layout_constraintBottom_toBottomOf="parent"
+            app:layout_constraintLeft_toLeftOf="parent"
+            app:layout_constraintRight_toRightOf="parent"
+            app:layout_constraintTop_toBottomOf="@id/container"
+            app:menu="@menu/bottom_navigation" />
 
-</androidx.constraintlayout.widget.ConstraintLayout>
+    </androidx.constraintlayout.widget.ConstraintLayout>
 
     <!-- Custom Navigation Drawer Start -->
     <LinearLayout
@@ -62,7 +62,8 @@
         android:layout_height="match_parent"
         android:layout_gravity="start"
         android:background="@color/secondary"
-        android:orientation="vertical">
+        android:orientation="vertical"
+        android:clickable="true">
 
         <LinearLayout
             android:layout_width="match_parent"
Index: app/src/main/java/com/bonhams/expensemanagement/ui/main/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.bonhams.expensemanagement.ui.main\n\nimport android.Manifest\nimport android.app.Dialog\nimport android.content.Intent\nimport android.content.pm.PackageManager\nimport android.graphics.Color\nimport android.graphics.drawable.ColorDrawable\nimport android.os.Bundle\nimport android.os.Handler\nimport android.os.Looper\nimport android.util.Log\nimport android.view.View\nimport android.view.Window\nimport android.widget.Button\nimport android.widget.EditText\nimport android.widget.TextView\nimport androidx.core.app.ActivityCompat\nimport androidx.core.view.GravityCompat\nimport androidx.fragment.app.Fragment\nimport androidx.lifecycle.Observer\nimport androidx.lifecycle.ViewModelProvider\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport com.bonhams.expensemanagement.BuildConfig\nimport com.bonhams.expensemanagement.R\nimport com.bonhams.expensemanagement.adapters.NavDrawerAdapter\nimport com.bonhams.expensemanagement.data.model.NavDrawerItem\nimport com.bonhams.expensemanagement.data.services.ApiHelper\nimport com.bonhams.expensemanagement.data.services.RetrofitBuilder\nimport com.bonhams.expensemanagement.ui.BaseActivity\nimport com.bonhams.expensemanagement.ui.BlankFragment\nimport com.bonhams.expensemanagement.ui.claims.newClaim.NewClaimFragment\nimport com.bonhams.expensemanagement.ui.gpsTracking.GPSTrackingFragment\nimport com.bonhams.expensemanagement.ui.home.HomeFragment\nimport com.bonhams.expensemanagement.ui.login.LoginActivity\nimport com.bonhams.expensemanagement.ui.mileageExpenses.newMileageClaim.NewMileageClaimFragment\nimport com.bonhams.expensemanagement.ui.myProfile.MyProfileFragment\nimport com.bonhams.expensemanagement.ui.notification.NotificationFragment\nimport com.bonhams.expensemanagement.utils.*\nimport com.bumptech.glide.Glide\nimport com.google.android.material.bottomnavigation.BottomNavigationView\nimport com.google.android.material.snackbar.Snackbar\nimport kotlinx.android.synthetic.main.activity_main.*\nimport kotlinx.android.synthetic.main.app_bar_main.*\nimport kotlinx.android.synthetic.main.app_bar_main.view.*\nimport org.imaginativeworld.oopsnointernet.callbacks.ConnectionCallback\nimport org.imaginativeworld.oopsnointernet.snackbars.fire.NoInternetSnackbarFire\n\n\nclass MainActivity : BaseActivity() {\n\n    private lateinit var viewModel: MainViewModel\n    private lateinit var navDrawerAdapter: NavDrawerAdapter\n    private val TAG = javaClass.simpleName\n    private var navDrawerItems = arrayListOf(\n        NavDrawerItem(R.drawable.ic_home, \"Expense\", -1),\n        NavDrawerItem(R.drawable.ic_nav_expense_plus, \"Manually Create\", 1),\n        NavDrawerItem(R.drawable.ic_nav_scan, \"Scan Receipt\", 2),\n        NavDrawerItem(R.drawable.ic_home, \"Mileage\", -1),\n        NavDrawerItem(R.drawable.ic_nav_car, \"Manually Create\", 3),\n        NavDrawerItem(R.drawable.ic_nav_gps, \"Start GPS\", 4),\n        NavDrawerItem(R.drawable.ic_profile, \"Others\", -1),\n        NavDrawerItem(R.drawable.ic_nav_my_profile, \"My Account\", 5),\n        NavDrawerItem(R.drawable.ic_nav_logout, \"Logout\", 6),\n    )\n\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        bottomNavigationView.setOnNavigationItemSelectedListener(mOnNavigationItemSelectedListener)\n        setupNavDrawer()\n        setupViewModel()\n        setupClickListeners()\n        setupAppbar()\n        setNoInternetSnackbar()\n        fragmentBackstackListener()\n\n        if (savedInstanceState == null) {\n            val fragment = HomeFragment()\n            changeFragment(fragment)\n        }\n    }\n\n    override fun onBackPressed() {\n        if (navDrawer.isDrawerOpen(GravityCompat.START)) {\n            navDrawer.closeDrawer(GravityCompat.START)\n        } else {\n            // Checking for fragment count on back stack\n            if (supportFragmentManager.backStackEntryCount > 0) {\n                backButtonPressed()\n            } else {\n                // Exit the app\n                super.onBackPressed()\n            }\n        }\n    }\n\n    private fun backButtonPressed(){\n        // Go to the previous fragment\n        supportFragmentManager.popBackStack()\n        // Reset app bar\n        if (supportFragmentManager.backStackEntryCount == 1) {\n            setupAppbar()\n            bottomNavigationView.selectedItemId = R.id.bottom_nav_home\n        }\n    }\n\n    private val mOnNavigationItemSelectedListener =\n        BottomNavigationView.OnNavigationItemSelectedListener { menuItem ->\n            bottomNavigationView.menu.setGroupCheckable(0, true, true)\n            when (menuItem.itemId) {\n                R.id.bottom_nav_home -> {\n                    setupAppbar()\n                    showBottomNavbar(true)\n                    removeAnyOtherFragVisible()\n                    val fragment = HomeFragment()\n                    changeFragment(fragment)\n                    return@OnNavigationItemSelectedListener true\n                }\n                R.id.bottom_nav_camera -> {\n                    setAppbarTitle(getString(R.string.scan_receipt))\n                    showBottomNavbar(true)\n                    val fragment = BlankFragment()\n                    changeFragment(fragment)\n                    return@OnNavigationItemSelectedListener true\n                }\n                R.id.bottom_nav_notifications -> {\n                    setAppbarTitle(getString(R.string.notifications))\n                    showBottomNavbar(true)\n                    val fragment = NotificationFragment()\n                    changeFragment(fragment)\n                    return@OnNavigationItemSelectedListener true\n                }\n                R.id.bottom_nav_my_profile -> {\n                    setAppbarTitle(getString(R.string.profile))\n                    showBottomNavbar(true)\n                    val fragment = MyProfileFragment()\n                    changeFragment(fragment)\n                    return@OnNavigationItemSelectedListener true\n                }\n            }\n            false\n        }\n\n    private fun setupClickListeners(){\n        layoutBack.setOnClickListener(View.OnClickListener {\n            if (supportFragmentManager.backStackEntryCount > 0) {\n                backButtonPressed()\n            }\n        })\n\n        ivMenu.setOnClickListener(View.OnClickListener {\n            if (!navDrawer.isDrawerOpen(GravityCompat.START)) {\n                navDrawer.openDrawer(GravityCompat.START)\n            }\n        })\n\n        ivSearch.setOnClickListener(View.OnClickListener {\n            Log.d(TAG, \"setupClickListeners: appbarSearchClick\")\n            viewModel.appbarSearchClick?.value = viewModel.appbarSearchClick?.value?.not()\n            Log.d(TAG, \"setupClickListeners: appbarSearchClick: ${viewModel.appbarSearchClick?.value}\")\n        })\n\n        appbarEdit.setOnClickListener(View.OnClickListener {\n            viewModel.appbarEditClick?.value = true\n        })\n    }\n\n    private fun setupViewModel() {\n        viewModel = ViewModelProvider(\n            this,\n            ViewModelFactory(ApiHelper(RetrofitBuilder.apiService))\n        ).get(MainViewModel::class.java)\n        \n        viewModel.responseLogout?.observe(this, Observer {\n            Log.d(TAG, \"setupViewModel: ${it.message}\")\n        })\n    }\n    \n    private fun setupAppbar(){\n        appbarTitle.visibility = View.GONE\n        layoutAppBarMenu.visibility = View.VISIBLE\n        layoutGreeting.visibility = View.VISIBLE\n        ivMenu.visibility = View.VISIBLE\n        layoutBack.visibility = View.GONE\n        layoutAppBarSearch.visibility = View.VISIBLE\n        ivSearch.visibility = View.VISIBLE\n    }\n\n    private fun setupNavDrawer(){\n        navDrawerTitle.text = AppPreferences.fullName\n        navDrawerDescription.text = AppPreferences.email\n        tvNavDrawerAppVersion.text = \"Version: ${BuildConfig.VERSION_NAME}(${BuildConfig.VERSION_CODE})\"\n        Glide.with(this)\n            .load(AppPreferences.profilePic)\n            .error(R.drawable.ic_default_user)\n            .fallback(R.drawable.ic_default_user)\n            .circleCrop()\n            .into(navDrawerProfilePic);\n\n        // Setup Recyclerview's Layout\n        navDrawerRv.layoutManager = LinearLayoutManager(this)\n        navDrawerRv.setHasFixedSize(true)\n\n        // Add Item Touch Listener\n        navDrawerRv.addOnItemTouchListener(RecyclerTouchListener(this, object : ClickListener {\n            override fun onClick(view: View, position: Int) {\n                Log.d(TAG, \"navDrawerRv onClick: $position\")\n                Log.d(TAG, \"navDrawerRv onClick code: ${navDrawerItems[position].code}\")\n                when (navDrawerItems[position].code) {\n                    1 -> { // Manually Create\n                        setAppbarTitle(getString(R.string.create_new_claim))\n                        showBottomNavbar(false)\n                        showAppbarBackButton(true)\n                        val fragment = NewClaimFragment()\n                        addFragment(fragment)\n                    }\n                    2 -> { // Scan Receipt\n                        setAppbarTitle(getString(R.string.scan_receipt))\n                        showBottomNavbar(false)\n                        showAppbarBackButton(true)\n                        val fragment = BlankFragment()\n                        addFragment(fragment)\n                    }\n                    3 -> { // Manually Create\n                        setAppbarTitle(getString(R.string.create_mileage_claim))\n                        showBottomNavbar(false)\n                        showAppbarBackButton(true)\n                        val fragment = NewMileageClaimFragment()\n                        addFragment(fragment)\n                    }\n                    4 -> { // Start GPS\n                        setAppbarTitle(getString(R.string.start_gps))\n                        showBottomNavbar(false)\n                        showAppbarBackButton(true)\n                        val fragment = GPSTrackingFragment()\n                        addFragment(fragment)\n                    }\n                    5 -> { // My Account\n                        setAppbarTitle(getString(R.string.profile))\n                        setupAppbar()\n                        bottomNavigationView.selectedItemId = R.id.bottom_nav_my_profile\n                    }\n                    6 -> { // Logout\n                        showLogoutAlert()\n                    }\n                    else -> {\n                        setupAppbar()\n                        showBottomNavbar(true)\n                        val fragment = HomeFragment()\n                        changeFragment(fragment)\n                    }\n                }\n\n                Handler(Looper.getMainLooper()).postDelayed({\n                    navDrawer.closeDrawer(GravityCompat.START)\n                }, 200)\n            }\n        }))\n\n//        updateAdapter(0)\n        navDrawerAdapter = NavDrawerAdapter(navDrawerItems, -1)\n        navDrawerRv.adapter = navDrawerAdapter\n        navDrawerAdapter.notifyDataSetChanged()\n    }\n\n    private fun showLogoutAlert() {\n        val dialog = Dialog(this)\n//        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE)\n        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE)\n        dialog.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))\n        dialog.setCancelable(false)\n        dialog.setContentView(R.layout.custom_alert_dialog)\n        val title = dialog.findViewById(R.id.txtTitle) as TextView\n        val body = dialog.findViewById(R.id.txtDescription) as TextView\n        val input = dialog.findViewById(R.id.edtDescription) as EditText\n        val yesBtn = dialog.findViewById(R.id.btnPositive) as Button\n        val noBtn = dialog.findViewById(R.id.btnNegative) as TextView\n\n        input.visibility = View.GONE\n        title.text = resources.getString(R.string.logout)\n        body.text = resources.getString(R.string.are_you_sure_you_want_to_logout)\n        yesBtn.text = resources.getString(R.string.logout)\n        noBtn.text = resources.getString(R.string.cancel)\n\n        yesBtn.setOnClickListener {\n            dialog.dismiss()\n            logoutUser()\n        }\n        noBtn.setOnClickListener { dialog.dismiss() }\n        dialog.show()\n    }\n\n    private fun logoutUser(){\n        viewModel.logoutUser().observe(this, Observer {\n            it?.let { resource ->\n                when (resource.status) {\n                    Status.SUCCESS -> {\n                        resource.data?.let { response ->\n                            Log.d(TAG, \"logoutUser: ${response.message}\")\n                        }\n                    }\n                    Status.ERROR -> {\n                        it.message?.let { it1 -> Log.d(TAG, \"logoutUser: $it1\")}\n                    }\n                    Status.LOADING -> {\n                        Log.d(TAG, \"Loading.......\")\n                    }\n                }\n            }\n        })\n\n        AppPreferences.clearPrefs()\n        val intent = Intent(this@MainActivity, LoginActivity::class.java)\n        startActivity(intent)\n        overridePendingTransition(R.anim.slide_in_right, R.anim.slide_out_left)\n        finish()\n    }\n\n\n    /*\n    * Location functions\n    * */\n    private fun hasLocationForegroundPermission() = ActivityCompat.checkSelfPermission(\n            this,\n            Manifest.permission.ACCESS_COARSE_LOCATION\n        ) == PackageManager.PERMISSION_GRANTED\n\n    private fun hasLocationBackgroundPermission() = ActivityCompat.checkSelfPermission(\n            this,\n            Manifest.permission.ACCESS_BACKGROUND_LOCATION\n        ) == PackageManager.PERMISSION_GRANTED\n\n    private fun hasFineLocationPermission() = ActivityCompat.checkSelfPermission(\n            this,\n            Manifest.permission.ACCESS_FINE_LOCATION\n        ) == PackageManager.PERMISSION_GRANTED\n\n    fun requestPermission() {\n        var permissionToRequest = mutableListOf<String>()\n        if (!hasLocationForegroundPermission())\n            permissionToRequest.add(Manifest.permission.ACCESS_COARSE_LOCATION)\n\n        if (!hasLocationBackgroundPermission())\n            permissionToRequest.add(Manifest.permission.ACCESS_BACKGROUND_LOCATION)\n\n        if (!hasFineLocationPermission())\n            permissionToRequest.add(Manifest.permission.ACCESS_FINE_LOCATION)\n\n        if (permissionToRequest.isNotEmpty()) {\n            ActivityCompat.requestPermissions(this, permissionToRequest.toTypedArray(), 0)\n        }\n    }\n\n    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray)\n    {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\n        if (requestCode == 0 && grantResults.isNotEmpty()) {\n            for (i in grantResults.indices) {\n                if (grantResults[i] == PackageManager.PERMISSION_GRANTED) {\n//                    viewModel.locationGranted = true\n                    Log.d(\"MainActivity\", \"onRequestPermissionsResult: ${permissions[i]}\")\n                }\n            }\n        }\n    }\n\n    /*\n    * App bar functions\n    * */\n    fun setAppbarTitle(title: String){\n        appbarTitle.visibility = View.VISIBLE\n        appbarTitle.text = title\n        layoutGreeting.visibility = View.GONE\n        ivMenu.visibility = View.VISIBLE\n        layoutBack.visibility = View.GONE\n        layoutAppBarSearch.visibility = View.VISIBLE\n    }\n\n    fun showAppbarBackButton(show: Boolean){\n        appbarTitle.visibility = View.VISIBLE//if(show) View.VISIBLE else View.INVISIBLE\n        layoutGreeting.visibility = View.GONE\n        ivMenu.visibility = View.GONE\n        layoutBack.visibility = if(show) View.VISIBLE else View.INVISIBLE\n        showAppbarSearch(false)\n    }\n\n    fun showAppbarSearch(show: Boolean){\n        layoutAppBarSearch.visibility = if(show) View.VISIBLE else View.INVISIBLE\n        ivSearch.visibility = if(show) View.VISIBLE else View.INVISIBLE\n        appbarEdit.visibility = View.GONE\n    }\n\n    fun showAppbarEdit(show: Boolean){\n        layoutAppBarSearch.visibility = if(show) View.VISIBLE else View.INVISIBLE\n        appbarEdit.visibility = if(show) View.VISIBLE else View.GONE\n        ivSearch.visibility = View.GONE\n    }\n\n    fun showBottomNavbar(show: Boolean){\n        bottomNavigationView.visibility = if(show) View.VISIBLE else View.GONE\n    }\n\n    /*\n    * Fragment backstack functions\n    * */\n    private fun removeAnyOtherFragVisible(){\n        supportFragmentManager.fragments.forEach {\n            if (it !is HomeFragment) {\n                supportFragmentManager.beginTransaction().remove(it).commit()\n            }\n        }\n    }\n\n    private fun changeFragment(fragment: Fragment) {\n        supportFragmentManager.beginTransaction().replace(\n            R.id.container,\n            fragment,\n            fragment.javaClass.simpleName\n        ).commit()\n    }\n\n    private fun addFragment(fragment: Fragment) {\n        supportFragmentManager.beginTransaction().add(\n            R.id.container,\n            fragment,\n            fragment.javaClass.simpleName\n        ).addToBackStack(fragment.javaClass.simpleName).commit()\n    }\n\n    private fun fragmentBackstackListener(){\n        supportFragmentManager.addOnBackStackChangedListener {\n            val fragment = supportFragmentManager.findFragmentById(R.id.container)\n            if (fragment != null) {\n                val fragName = fragment.javaClass.simpleName\n                if(fragName.equals(HomeFragment::class.java.name, true)){\n                    setupAppbar()\n                }\n                else if(fragName.equals(NewClaimFragment::class.java.simpleName, true)){\n                    setAppbarTitle(getString(R.string.create_new_claim))\n                    showAppbarBackButton(true)\n                    showBottomNavbar(false)\n                }\n                else if(fragName.equals(BlankFragment::class.java.simpleName, true)){\n                    setAppbarTitle(getString(R.string.bonhams))\n                    setupAppbar()\n                    showBottomNavbar(true)\n                }\n                else if(fragName.equals(NewMileageClaimFragment::class.java.simpleName, true)){\n                    setAppbarTitle(getString(R.string.create_mileage_claim))\n                    showAppbarBackButton(true)\n                    showBottomNavbar(false)\n                }\n                else if(fragName.equals(GPSTrackingFragment::class.java.simpleName, true)){\n                    setAppbarTitle(getString(R.string.start_gps))\n                    showAppbarBackButton(true)\n                    showBottomNavbar(false)\n                }\n                else if(fragName.equals(NotificationFragment::class.java.simpleName, true)){\n                    setAppbarTitle(getString(R.string.notifications))\n                    showAppbarBackButton(false)\n                    showBottomNavbar(true)\n                }\n                else if(fragName.equals(MyProfileFragment::class.java.simpleName, true)){\n                    setAppbarTitle(getString(R.string.profile))\n                    showAppbarBackButton(false)\n                    showBottomNavbar(true)\n                }\n            }\n        }\n    }\n\n    /*\n    * No internet connection check\n    * */\n    private fun setNoInternetSnackbar(){\n        // No Internet Snackbar: Fire\n        NoInternetSnackbarFire.Builder(\n            navDrawer,\n            lifecycle\n        ).apply {\n            snackbarProperties.apply {\n                connectionCallback = object : ConnectionCallback { // Optional\n                    override fun hasActiveConnection(hasActiveConnection: Boolean) {\n\n                    }\n                }\n\n                duration = Snackbar.LENGTH_INDEFINITE // Optional\n                noInternetConnectionMessage = \"No active Internet connection!\" // Optional\n                onAirplaneModeMessage = \"You have turned on the airplane mode!\" // Optional\n                snackbarActionText = \"Settings\" // Optional\n                showActionToDismiss = false // Optional\n                snackbarDismissActionText = \"OK\" // Optional\n            }\n        }.build()\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/bonhams/expensemanagement/ui/main/MainActivity.kt	(revision 7f83f402f94a215b57c9d412305013106377d540)
+++ app/src/main/java/com/bonhams/expensemanagement/ui/main/MainActivity.kt	(date 1629776882567)
@@ -126,6 +126,14 @@
                     changeFragment(fragment)
                     return@OnNavigationItemSelectedListener true
                 }
+                R.id.bottom_nav_expense_plus -> {
+                    setAppbarTitle(getString(R.string.create_new_claim))
+                    showBottomNavbar(false)
+                    showAppbarBackButton(true)
+                    val fragment = NewClaimFragment()
+                    addFragment(fragment)
+                    return@OnNavigationItemSelectedListener true
+                }
                 R.id.bottom_nav_notifications -> {
                     setAppbarTitle(getString(R.string.notifications))
                     showBottomNavbar(true)
Index: app/src/main/res/menu/bottom_navigation.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <item\n        android:id=\"@+id/bottom_nav_home\"\n        android:icon=\"@drawable/ic_home\"\n        android:title=\"@string/home\" />\n\n    <item\n        android:id=\"@+id/bottom_nav_camera\"\n        android:icon=\"@drawable/ic_scan\"\n        android:title=\"@string/scan\" />\n    <item\n        android:id=\"@+id/bottom_nav_notifications\"\n        android:icon=\"@drawable/ic_notification\"\n        android:title=\"@string/notifications\" />\n    <item\n        android:id=\"@+id/bottom_nav_my_profile\"\n        android:icon=\"@drawable/ic_profile\"\n        android:title=\"@string/my_profile\" />\n</menu>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/menu/bottom_navigation.xml	(revision 7f83f402f94a215b57c9d412305013106377d540)
+++ app/src/main/res/menu/bottom_navigation.xml	(date 1629777847227)
@@ -4,12 +4,15 @@
         android:id="@+id/bottom_nav_home"
         android:icon="@drawable/ic_home"
         android:title="@string/home" />
-
     <item
         android:id="@+id/bottom_nav_camera"
         android:icon="@drawable/ic_scan"
         android:title="@string/scan" />
     <item
+        android:id="@+id/bottom_nav_expense_plus"
+        android:icon="@drawable/ic_plus"
+        android:title="@string/create_new_claim"/>
+    <item
         android:id="@+id/bottom_nav_notifications"
         android:icon="@drawable/ic_notification"
         android:title="@string/notifications" />
